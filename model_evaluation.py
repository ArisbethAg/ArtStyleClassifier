# -*- coding: utf-8 -*-
"""ModelEvaluation_v7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zVI05-DG5qxtbHF85DYtOzDz4yB8Ht72
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/Users/arisbethaguirre/Downloads/ArtStyleModels/v6/ArtStyleModel_VGG16_v7.h5"
!ls

import matplotlib.pyplot as plt
import numpy as np
import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

base_dir = "/Users/arisbethaguirre/Downloads/PaintingsDataset"
train_dir = os.path.join(base_dir,'train')
test_dir = os.path.join(base_dir, 'test')
new_model = tf.keras.models.load_model('ArtStyleModel_VGG16_new.h5')

test_datagen = ImageDataGenerator(1./255)
test_generator = test_datagen.flow_from_directory(
							test_dir,
							target_size = (150, 150),
							batch_size = 32,
							class_mode ='binary',
							shuffle = True
							)


test_loss, test_acc = new_model.evaluate(test_generator, steps=len(test_generator))
print('\nTotal test acc :\n', test_acc)
print('\nTotal test loss :\n', test_loss)

predictions = new_model.predict(test_generator)

prediction_classes = (predictions > 0.5).astype(int)

true_classes = test_generator.classes
my_labels = ['Impressionism', 'NonImpressionism']

conf_matrix = confusion_matrix(true_classes, prediction_classes)

disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=my_labels)
disp.plot(cmap=plt.cm.Blues)
plt.title('Matriz de Confusión')
plt.show()

from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score


precision = precision_score(true_classes, prediction_classes)
recall = recall_score(true_classes, prediction_classes)
f1score = f1_score(true_classes, prediction_classes)

print("f1 score: ", f1score)
print("recall: ", recall)
print("precision: ", precision)

train_datagen = ImageDataGenerator(
							rescale = 1./255,
							rotation_range = 20,
							horizontal_flip = True,
							brightness_range=(1,0.8),
							vertical_flip = True,
							)

train_generator = train_datagen.flow_from_directory(
							train_dir,
							target_size = (150, 150),
							batch_size = 32,
							class_mode ='binary',
							)

predictions_train = new_model.predict(train_generator)

prediction_classes_train = (predictions_train > 0.5).astype(int)

true_classes_train = train_generator.classes
my_labels = ['Impressionism', 'NonImpressionism']

conf_matrix = confusion_matrix(true_classes_train, prediction_classes_train)

disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=my_labels)
disp.plot(cmap=plt.cm.Blues)
plt.title('Matriz de Confusión')
plt.show()