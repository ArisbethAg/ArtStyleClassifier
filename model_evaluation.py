# -*- coding: utf-8 -*-
"""ModelEvaluation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hPNCWvXV8h94pPXIaLp9XOoqj2Re8gDg
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/ArtStyleClassifier"
!ls

import matplotlib.pyplot as plt
import numpy as np
import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from tensorflow.keras.applications.vgg16 import VGG16

from tensorflow.keras import optimizers
from tensorflow.keras import models
from tensorflow.keras import layers
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

base_dir = 'PaintingsDataset'
test_dir = os.path.join(base_dir, 'test')
new_model = tf.keras.models.load_model('ArtStyleModel_VGG16.keras')

test_datagen = ImageDataGenerator(1./255)
test_generator = test_datagen.flow_from_directory(
							test_dir,
							target_size = (150, 150),
							batch_size = 32,
							class_mode ='binary',
							shuffle = True
							)


test_loss, test_acc = new_model.evaluate(test_generator, steps=len(test_generator))
print('\nTotal test acc :\n', test_acc)
print('\nTotal test loss :\n', test_loss)

predictions = new_model.predict(test_generator)

prediction_classes = (predictions > 0.5).astype(int)

true_classes = test_generator.classes
my_labels = ['Impressionism', 'NonImpressionism']

conf_matrix = confusion_matrix(true_classes, prediction_classes)

disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=my_labels)
disp.plot(cmap=plt.cm.Blues)
plt.title('Matriz de Confusi√≥n')
plt.show()

from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score


precision = precision_score(true_classes, prediction_classes)
recall = recall_score(true_classes, prediction_classes)
f1score = f1_score(true_classes, prediction_classes)

print("f1 score: ", f1score)
print("recall: ", recall)
print("precision: ", precision)